// Generated by SolidPython 0.4.7 on 2020-03-21 20:39:38


union() {
	translate(v = [0, -31.6666666667, 0]) {
		union() {
			difference() {
				translate(v = [0, -5, 0]) {
					difference() {
						cube(size = [30, 23.3333333333, 5]);
						rotate(a = [0, 0, 90]) {
							translate(v = [0, 0, -0.5000000000]) {
								difference() {
									cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
									translate(v = [0, 0, -0.5000000000]) {
										cylinder(h = 8, r = 5.0000000000);
									}
								}
							}
						}
						translate(v = [5.0000000000, 5.0000000000, 0]) {
							rotate(a = [0, 0, 180]) {
								translate(v = [0, 0, -0.5000000000]) {
									difference() {
										cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
										translate(v = [0, 0, -0.5000000000]) {
											cylinder(h = 8, r = 5.0000000000);
										}
									}
								}
							}
						}
						translate(v = [5.0000000000, 18.3333333333, 0]) {
							rotate(a = [0, 0, 90]) {
								translate(v = [0, 0, -0.5000000000]) {
									difference() {
										cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
										translate(v = [0, 0, -0.5000000000]) {
											cylinder(h = 8, r = 5.0000000000);
										}
									}
								}
							}
						}
						translate(v = [25.0000000000, 5.0000000000, 0]) {
							rotate(a = [0, 0, 270]) {
								translate(v = [0, 0, -0.5000000000]) {
									difference() {
										cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
										translate(v = [0, 0, -0.5000000000]) {
											cylinder(h = 8, r = 5.0000000000);
										}
									}
								}
							}
						}
						translate(v = [25.0000000000, 18.3333333333, 0]) {
							translate(v = [0, 0, -0.5000000000]) {
								difference() {
									cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
									translate(v = [0, 0, -0.5000000000]) {
										cylinder(h = 8, r = 5.0000000000);
									}
								}
							}
						}
						translate(v = [5, 5, -1]) {
							difference() {
								cube(size = [20, 13.3333333333, 7]);
								rotate(a = [0, 0, 90]) {
									translate(v = [0, 0, -0.5000000000]) {
										difference() {
											cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
											translate(v = [0, 0, -0.5000000000]) {
												cylinder(h = 10, r = 5.0000000000);
											}
										}
									}
								}
								translate(v = [5.0000000000, 5.0000000000, 0]) {
									rotate(a = [0, 0, 180]) {
										translate(v = [0, 0, -0.5000000000]) {
											difference() {
												cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
												translate(v = [0, 0, -0.5000000000]) {
													cylinder(h = 10, r = 5.0000000000);
												}
											}
										}
									}
								}
								translate(v = [5.0000000000, 8.3333333333, 0]) {
									rotate(a = [0, 0, 90]) {
										translate(v = [0, 0, -0.5000000000]) {
											difference() {
												cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
												translate(v = [0, 0, -0.5000000000]) {
													cylinder(h = 10, r = 5.0000000000);
												}
											}
										}
									}
								}
								translate(v = [15.0000000000, 5.0000000000, 0]) {
									rotate(a = [0, 0, 270]) {
										translate(v = [0, 0, -0.5000000000]) {
											difference() {
												cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
												translate(v = [0, 0, -0.5000000000]) {
													cylinder(h = 10, r = 5.0000000000);
												}
											}
										}
									}
								}
								translate(v = [15.0000000000, 8.3333333333, 0]) {
									translate(v = [0, 0, -0.5000000000]) {
										difference() {
											cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
											translate(v = [0, 0, -0.5000000000]) {
												cylinder(h = 10, r = 5.0000000000);
											}
										}
									}
								}
							}
						}
					}
				}
				translate(v = [5, 6.3333333333, -1]) {
					cube(size = [20, 17.3333333333, 7]);
				}
			}
			translate(v = [25, 15.8333333333, 0]) {
				cylinder(h = 5, r = 2.5000000000);
			}
			translate(v = [0, -7.5000000000, 0]) {
				cube(size = [5, 39.1666666667, 5]);
			}
			translate(v = [2.5000000000, -7.5000000000, 0]) {
				cylinder(h = 5, r = 2.5000000000);
			}
			translate(v = [15.0000000000, 21.6666666667, 0]) {
				rotate(a = [0, 0, 90]) {
					translate(v = [0, 0, 0]) {
						difference() {
							cube(size = [11.0000000000, 11.0000000000, 5]);
							translate(v = [0, 0, -0.5000000000]) {
								cylinder(h = 8, r = 10.0000000000);
							}
						}
					}
				}
			}
			translate(v = [-9.5000000000, 21.6666666667, 0]) {
				translate(v = [0, 0, 0]) {
					difference() {
						cube(size = [11.0000000000, 11.0000000000, 5]);
						translate(v = [0, 0, -0.5000000000]) {
							cylinder(h = 8, r = 10.0000000000);
						}
					}
				}
			}
		}
	}
	union() {
		difference() {
			cube(size = [30, 30, 5]);
			rotate(a = [0, 0, 90]) {
				translate(v = [0, 0, -0.5000000000]) {
					difference() {
						cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
						translate(v = [0, 0, -0.5000000000]) {
							cylinder(h = 8, r = 5.0000000000);
						}
					}
				}
			}
			translate(v = [5.0000000000, 5.0000000000, 0]) {
				rotate(a = [0, 0, 180]) {
					translate(v = [0, 0, -0.5000000000]) {
						difference() {
							cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
							translate(v = [0, 0, -0.5000000000]) {
								cylinder(h = 8, r = 5.0000000000);
							}
						}
					}
				}
			}
			translate(v = [5.0000000000, 25.0000000000, 0]) {
				rotate(a = [0, 0, 90]) {
					translate(v = [0, 0, -0.5000000000]) {
						difference() {
							cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
							translate(v = [0, 0, -0.5000000000]) {
								cylinder(h = 8, r = 5.0000000000);
							}
						}
					}
				}
			}
			translate(v = [25.0000000000, 5.0000000000, 0]) {
				rotate(a = [0, 0, 270]) {
					translate(v = [0, 0, -0.5000000000]) {
						difference() {
							cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
							translate(v = [0, 0, -0.5000000000]) {
								cylinder(h = 8, r = 5.0000000000);
							}
						}
					}
				}
			}
			translate(v = [25.0000000000, 25.0000000000, 0]) {
				translate(v = [0, 0, -0.5000000000]) {
					difference() {
						cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
						translate(v = [0, 0, -0.5000000000]) {
							cylinder(h = 8, r = 5.0000000000);
						}
					}
				}
			}
			translate(v = [5, 5, -1]) {
				difference() {
					cube(size = [20, 20, 7]);
					rotate(a = [0, 0, 90]) {
						translate(v = [0, 0, -0.5000000000]) {
							difference() {
								cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
								translate(v = [0, 0, -0.5000000000]) {
									cylinder(h = 10, r = 5.0000000000);
								}
							}
						}
					}
					translate(v = [5.0000000000, 5.0000000000, 0]) {
						rotate(a = [0, 0, 180]) {
							translate(v = [0, 0, -0.5000000000]) {
								difference() {
									cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
									translate(v = [0, 0, -0.5000000000]) {
										cylinder(h = 10, r = 5.0000000000);
									}
								}
							}
						}
					}
					translate(v = [5.0000000000, 15.0000000000, 0]) {
						rotate(a = [0, 0, 90]) {
							translate(v = [0, 0, -0.5000000000]) {
								difference() {
									cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
									translate(v = [0, 0, -0.5000000000]) {
										cylinder(h = 10, r = 5.0000000000);
									}
								}
							}
						}
					}
					translate(v = [15.0000000000, 5.0000000000, 0]) {
						rotate(a = [0, 0, 270]) {
							translate(v = [0, 0, -0.5000000000]) {
								difference() {
									cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
									translate(v = [0, 0, -0.5000000000]) {
										cylinder(h = 10, r = 5.0000000000);
									}
								}
							}
						}
					}
					translate(v = [15.0000000000, 15.0000000000, 0]) {
						translate(v = [0, 0, -0.5000000000]) {
							difference() {
								cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
								translate(v = [0, 0, -0.5000000000]) {
									cylinder(h = 10, r = 5.0000000000);
								}
							}
						}
					}
				}
			}
		}
		translate(v = [-25, 0, 0]) {
			difference() {
				cube(size = [30, 30, 5]);
				rotate(a = [0, 0, 90]) {
					translate(v = [0, 0, -0.5000000000]) {
						difference() {
							cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
							translate(v = [0, 0, -0.5000000000]) {
								cylinder(h = 8, r = 5.0000000000);
							}
						}
					}
				}
				translate(v = [5.0000000000, 5.0000000000, 0]) {
					rotate(a = [0, 0, 180]) {
						translate(v = [0, 0, -0.5000000000]) {
							difference() {
								cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
								translate(v = [0, 0, -0.5000000000]) {
									cylinder(h = 8, r = 5.0000000000);
								}
							}
						}
					}
				}
				translate(v = [5.0000000000, 25.0000000000, 0]) {
					rotate(a = [0, 0, 90]) {
						translate(v = [0, 0, -0.5000000000]) {
							difference() {
								cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
								translate(v = [0, 0, -0.5000000000]) {
									cylinder(h = 8, r = 5.0000000000);
								}
							}
						}
					}
				}
				translate(v = [25.0000000000, 5.0000000000, 0]) {
					rotate(a = [0, 0, 270]) {
						translate(v = [0, 0, -0.5000000000]) {
							difference() {
								cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
								translate(v = [0, 0, -0.5000000000]) {
									cylinder(h = 8, r = 5.0000000000);
								}
							}
						}
					}
				}
				translate(v = [25.0000000000, 25.0000000000, 0]) {
					translate(v = [0, 0, -0.5000000000]) {
						difference() {
							cube(size = [6.0000000000, 6.0000000000, 7.0000000000]);
							translate(v = [0, 0, -0.5000000000]) {
								cylinder(h = 8, r = 5.0000000000);
							}
						}
					}
				}
				translate(v = [5, 5, -1]) {
					difference() {
						cube(size = [20, 20, 7]);
						rotate(a = [0, 0, 90]) {
							translate(v = [0, 0, -0.5000000000]) {
								difference() {
									cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
									translate(v = [0, 0, -0.5000000000]) {
										cylinder(h = 10, r = 5.0000000000);
									}
								}
							}
						}
						translate(v = [5.0000000000, 5.0000000000, 0]) {
							rotate(a = [0, 0, 180]) {
								translate(v = [0, 0, -0.5000000000]) {
									difference() {
										cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
										translate(v = [0, 0, -0.5000000000]) {
											cylinder(h = 10, r = 5.0000000000);
										}
									}
								}
							}
						}
						translate(v = [5.0000000000, 15.0000000000, 0]) {
							rotate(a = [0, 0, 90]) {
								translate(v = [0, 0, -0.5000000000]) {
									difference() {
										cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
										translate(v = [0, 0, -0.5000000000]) {
											cylinder(h = 10, r = 5.0000000000);
										}
									}
								}
							}
						}
						translate(v = [15.0000000000, 5.0000000000, 0]) {
							rotate(a = [0, 0, 270]) {
								translate(v = [0, 0, -0.5000000000]) {
									difference() {
										cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
										translate(v = [0, 0, -0.5000000000]) {
											cylinder(h = 10, r = 5.0000000000);
										}
									}
								}
							}
						}
						translate(v = [15.0000000000, 15.0000000000, 0]) {
							translate(v = [0, 0, -0.5000000000]) {
								difference() {
									cube(size = [6.0000000000, 6.0000000000, 9.0000000000]);
									translate(v = [0, 0, -0.5000000000]) {
										cylinder(h = 10, r = 5.0000000000);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	translate(v = [0, -5, 0]) {
		cube(size = [5, 10, 5]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *

# Units are mm

def rounder(height, radius, tolerance=0.5):
    # Adding 1 mm extra padding to ensure proper sustraction
    res = cube([radius+1, radius+1, height+tolerance*4])-\
          translate([0, 0, -0.5])(cylinder(r=radius, h=height+3))
    res = translate([0, 0, -tolerance])(res)
    return res

def round_cube(width, length, height, radius):
    res = cube([width, length, height])-rotate([0, 0, 90])(rounder(height, radius))
    corner1 = translate([radius, radius, 0])(rotate([0, 0, 180])(rounder(height, radius)))
    corner2 = translate([radius, length-radius, 0])(rotate([0, 0, 90])(rounder(height, radius)))
    corner3 = translate([width-radius, radius, 0])(rotate([0, 0, 270])(rounder(height, radius)))
    corner4 = translate([width-radius, length-radius, 0])(rounder(height, radius))
    return res-corner1-corner2-corner3-corner4

def hollow_round_cube(width, length, height, radius, girth):
    res = round_cube(width + girth * 2, length + girth * 2, height, radius)
    hole = translate([girth, girth, -1])(round_cube(width, length, height + 2, radius))
    return res - hole

def double_hollow_round_cube(width, length, height, radius, girth):
    first = hollow_round_cube(width, length, height, radius, girth)
    second = translate([-width - girth, 0, 0])\
            (hollow_round_cube(width, length, height, radius, girth))
    return first + second

def hook(width, length, height, radius, girth, finger_length):
    res = translate([0, -girth, 0])(hollow_round_cube(width, length, height, radius, girth))
    inn = translate([girth, length-girth-2, -1])(cube([width, length + 4, height + 2]))
    tip = translate([width+girth, length+girth/2, 0])(cylinder(r=girth/2, h=height))
    joint = rounder(height, radius*2, 0)
    join1 = translate([radius*2+girth, length-radius*2+girth+finger_length, 0])\
            (rotate([0, 0, 90])(joint))
    join2 = translate([- width + girth+2+radius/2 + 1, length-radius * 2+girth+finger_length, 0])\
            (joint)
    finger = translate([0, -girth*1.5, 0])\
            (cube([girth, finger_length + girth * 2.5 + length, girth]))
    fingertip = translate([girth/2, -girth*1.5, 0])(cylinder(r=girth / 2, h=height))
    return translate([0, -length-girth-finger_length, 0])\
            (res-inn+tip+finger+fingertip+join1+join2)


def tool(width, length, height, radius, girth, finger_length, hook_length):
    handler = double_hollow_round_cube(width, length, height, radius, girth)
    h = hook(width, hook_length, height, radius, girth, finger_length)
    joint = translate([0, -girth, 0])(cube([girth, girth*2, height]))
    return h+handler+joint


hole_width = 20
hole_length = hole_width
hook_length = hole_width/1.5
finger_length = hole_width/1.5
girth = 5
height = girth
radius = hole_width/4

res = tool(hole_width, hole_length, height, radius, girth, finger_length, hook_length)

print("Saving openscad file...")
scad_render_to_file(res, "grab_hook.scad") 
 
************************************************/
